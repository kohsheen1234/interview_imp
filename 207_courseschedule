class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {

        //create a graph  for topological sorting using bfs
        //maintain an array with incoming count of edges of each node

        unordered_map<int, vector<int>> adjList;
        vector<int> incomingEdgesCount(numCourses,0);

        for(int i = 0 ; i<prerequisites.size();i++){
            incomingEdgesCount[prerequisites[i][0]]++;
            adjList[prerequisites[i][1]].push_back(prerequisites[i][0]);
        }

        //for bfs create a queue - insert points in the queue which have 0 incoming edges
       
        queue<int> q;
        // Enqueue nodes with zero incoming edges
        for(int i = 0; i < numCourses; i++){
            if(incomingEdgesCount[i] == 0){
                q.push(i);
            }
        }

        int visited = 0;
        while(!q.empty()){
            //start from first node
            int curr = q.front();
            q.pop();
            visited++;

            for(int neighbor : adjList[curr]){
                incomingEdgesCount[neighbor]--;
                if(incomingEdgesCount[neighbor] == 0){
                    q.push(neighbor);
                }
            }
        }

        return (visited==numCourses);
    }
};
