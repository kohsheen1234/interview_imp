#SOLUTION1

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {

        vector<int> ans(nums.size(),1);

        // j_ _i 
        // _j_i
        // _ _ ji

        for(int i = 1;i<nums.size();i++){

            for(int j = 0; j<i;j++){
                if(nums[j]<nums[i]){
                    ans[i] = max(ans[j] +1,ans[i]);
                }
            }
        }

        int max_ = INT_MIN;
        for(int i = 0;i<ans.size();i++){
            max_ = max(max_, ans[i]);
        }
        return max_;
    }
};

#SOLUTION 2
// Function to find the length of the longest increasing subsequence
int getAns(int arr[], int n, int ind, int prev_index, vector<vector<int>>& dp) {
    // Base condition
    if (ind == n)
        return 0;
        
    if (dp[ind][prev_index + 1] != -1)
        return dp[ind][prev_index + 1];
    
    int notTake = 0 + getAns(arr, n, ind + 1, prev_index, dp);
    
    int take = 0;
    
    if (prev_index == -1 || arr[ind] > arr[prev_index]) {
        take = 1 + getAns(arr, n, ind + 1, ind, dp);
        cout<<endl;
    }
    
    return dp[ind][prev_index + 1] = max(notTake, take);
}

int longestIncreasingSubsequence(int arr[], int n) {
    // Create a 2D DP array initialized to -1
    vector<vector<int>> dp(n, vector<int>(n + 1, -1));
    
    return getAns(arr, n, 0, -1, dp);
}
