//You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

//Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

//You may assume that you have an infinite number of each kind of coin.


class Solution {
public:
    int coinChange(vector<int>& coins, int T) {

        vector<int> arr(T+1,INT_MAX); 
        arr[0] = 0;

        for(int amt = 0; amt<=T;amt++){
            for (int coin:coins){ //loop through all coins<current_amount
                if(coin<=amt && arr[amt-coin]!=INT_MAX){
                    arr[amt] = min(arr[amt-coin]+1, arr[amt]);
                }
            }
        }
        
        if( arr[T]==INT_MAX){
            return -1;
        }
        return arr[T];
      
    
    }
};
